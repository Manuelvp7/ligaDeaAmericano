/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Wed Mar 07 23:27:26 CST 2018
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package DAOimpl;

import modelo.Partido;
import modelo.PartidoKey;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import DAO.PartidoDAO;

/**
 * This class provides methods to populate DB Table of Partido
 */
public class PartidoDAOImpl implements PartidoDAO {
    /* SQL to insert data */
    
    
    
    
    private static final String SQL_INSERT =
        "INSERT INTO Partido ("
        + "temporada, noJornada, equipoLocal, equipoVisitante, fecha, hora, marcadorLocal, "
        + "marcadorVisitante, partidoFinalizado"
        + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    
        
    private static final String SQL_SELECT_PROXIMAS_FECHAS =

            "SELECT p.fecha,p.hora,p.equipoLocal,p.equipoVisitante,e.estadio FROM Partido p INNER JOIN"
                    + " Equipo e ON nombre = equipoLocal"
                    + " WHERE (p.equipoLocal in (?) OR p.equipoVisitante in (?))  AND p.temporada = ?  AND p.partidoFinalizado = ?";
    
        
    private static final String SQL_SELECT_RESULTADOS_DE_PARTIDO =
            "SELECT *"
            + " FROM Partido"
            + " WHERE equipoLocal OR equipoVisitante in (?)"
            + " AND temporada = ?  AND partidoFinalizado = ?";


    private static final String SQL_SELECT_PARTIDOS_PENDIENTES =
        "SELECT "
        + "temporada, noJornada, equipoLocal, equipoVisitante, fecha, hora, marcadorLocal, "
        + "marcadorVisitante, partidoFinalizado "
        + "FROM Partido WHERE "
        + "partidoFinalizado = false";
    
    private static final String SQL_SELECT =
        "SELECT "
        + "temporada, noJornada, equipoLocal, equipoVisitante, fecha, hora, marcadorLocal, "
        + "marcadorVisitante, partidoFinalizado "
        + "FROM Partido WHERE "
        + "temporada = ? AND noJornada = ? AND equipoLocal = ? AND equipoVisitante = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE Partido SET "
        + "fecha = ?, hora = ?, marcadorLocal = ?, marcadorVisitante = ?, partidoFinalizado = ? "
        + "WHERE "
        + "temporada = ? AND noJornada = ? AND equipoLocal = ? AND equipoVisitante = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM Partido WHERE "
        + "temporada = ? AND noJornada = ? AND equipoLocal = ? AND equipoVisitante = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Partido bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setString(1, bean.getTemporada());
            ps.setInt(2, bean.getNojornada());
            ps.setString(3, bean.getEquipolocal());
            ps.setString(4, bean.getEquipovisitante());
            if (bean.getFecha() != null)
                ps.setDate(5, new java.sql.Date(bean.getFecha().getTime()));
            else
                ps.setNull(5, Types.DATE);
            if (bean.getHora() != null)
                ps.setTime(6, new java.sql.Time(bean.getHora().getTime()));
            else
                ps.setNull(6, Types.DATE);
            ps.setInt(7, bean.getMarcadorlocal());
            ps.setInt(8, bean.getMarcadorvisitante());
            ps.setBoolean(9, bean.getPartidofinalizado());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    
    
        
    public List<Partido> loadResultados(String temporada,String equipo,Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            
            ps = conn.prepareStatement(SQL_SELECT_RESULTADOS_DE_PARTIDO);
            ps.setString(1, equipo);
            ps.setString(2, temporada);
            ps.setBoolean(3, true);
            
            
            
            
            rs = ps.executeQuery();
            
            List<Partido> results = getResults(rs);          
            if (results.size() > 0){                                
                
                return results;   
            }

            else{
                System.out.println("NO HAY NADA");
                return null;
            }
                
                
        }finally {
            close(rs);
            close(ps);
        }
    }
   
    
    public List<Object[]> loadProximosPartidos(String temporada,String equipo,Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            
            ps= conn.prepareStatement(SQL_SELECT_PROXIMAS_FECHAS);
            ps.setString(1, equipo);
            ps.setString(2, equipo);
            ps.setString(3, temporada);
            ps.setBoolean(4, false);
            rs=ps.executeQuery();
            
            System.out.println("PREPARED STATEMENT DE PROXIMAS FECHAS"+ps);
            
            
            
            System.out.println("ANDAMOS BUSCANDO PROXIMOS PARTIDOS");

            List results;
            results = getResultsProximaFechas(rs);
            
            System.out.println("NO SE TRABAAAAAAAAAAAAAAAAAAAA");
            
            
            if (results.size() > 0){
                                
                System.out.println("RETORNANDO PROXIMAS FECHAS PARA "+equipo +" "+temporada);
                return results;
            }
            else    
                return null;
                
        }finally {
            close(rs);
            close(ps);
        }
    }
    
    
       
    public List<Partido> load(Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_PARTIDOS_PENDIENTES);

            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return results;
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }
    
    public Partido load(PartidoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setString(1, key.getTemporada());
            ps.setInt(2, key.getNojornada());
            ps.setString(3, key.getEquipolocal());
            ps.setString(4, key.getEquipovisitante());
            rs = ps.executeQuery();

            
            List results = getResults(rs);
            if (results.size() > 0)
                return (Partido) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Partido bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            
            ps = conn.prepareStatement(SQL_UPDATE);
            if (bean.getFecha() != null){
                ps.setDate(1, new java.sql.Date(bean.getFecha().getTime()));
                System.out.println("LA FECHA "+bean.getFecha().getTime());
            }
            else
                ps.setNull(1, Types.DATE);
            if (bean.getHora() != null)
                ps.setTime(2, new java.sql.Time(bean.getHora().getTime()));
            else
                ps.setNull(2, Types.DATE);
            ps.setInt(3, bean.getMarcadorlocal());
            ps.setInt(4, bean.getMarcadorvisitante());
            ps.setBoolean(5, bean.getPartidofinalizado());
            ps.setString(6, bean.getTemporada());
            ps.setInt(7, bean.getNojornada());
            ps.setString(8, bean.getEquipolocal());
            ps.setString(9, bean.getEquipovisitante());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(PartidoKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setString(1, key.getTemporada());
            ps.setInt(2, key.getNojornada());
            ps.setString(3, key.getEquipolocal());
            ps.setString(4, key.getEquipovisitante());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    
        protected List<Object[]> getResultsProximaFechas(ResultSet rs) throws SQLException {
        
        
        System.out.println("AQUI HAY DE DONDE AGARRAR PROXIMAS FECHAS");
        List results = new ArrayList<Partido>();
        
        
        System.out.println("AQUI HAY DE DONDE AGARRAR 2 PROXIMAS FECHAS");

        while (rs.next()) {
            
            
            Object[] registro = new Object[5];
            
            registro[0]=(rs.getDate("p.fecha"));
            registro[1]=(rs.getTime("p.hora"));
            registro[2]=(rs.getString("p.equipoLocal"));
            registro[3]=(rs.getString("p.equipoVisitante"));

            registro[4]=(rs.getString("estadio"));

   
            
            results.add(registro);
        }
        return results;
    }
    
    
    
    protected List<Partido> getResults(ResultSet rs) throws SQLException {
        
        
        System.out.println("AQUI HAY DE DONDE AGARRAR");
        List results = new ArrayList<Partido>();
        
        
        System.out.println("AQUI HAY DE DONDE AGARRAR 2");

        while (rs.next()) {
            
            
            Partido bean = new Partido();
            bean.setTemporada(rs.getString("temporada"));
            bean.setNojornada(rs.getInt("noJornada"));
            bean.setEquipolocal(rs.getString("equipoLocal"));
            bean.setEquipovisitante(rs.getString("equipoVisitante"));
            bean.setFecha(rs.getDate("fecha"));
            bean.setHora(rs.getTime("hora"));
            bean.setMarcadorlocal(rs.getInt("marcadorLocal"));
            bean.setMarcadorvisitante(rs.getInt("marcadorVisitante"));
            bean.setPartidofinalizado(rs.getBoolean("partidoFinalizado"));
   
            
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}