/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Sun Feb 25 05:11:22 CST 2018
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package DAOimpl;

import modelo.Articulo;
import modelo.ArticuloKey;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import DAO.ArticuloDAO;
import modelo.Tienda;

/**
 * This class provides methods to populate DB Table of Articulo
 */
public class ArticuloDAOImpl implements ArticuloDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO Articulo ("
        + "categoria, proveedor, nombre, precio"
        + ") VALUES (?, ?, ?, ?)";

    /* SQL to select data */
    
    private static final String SQL_SELECT_ARTICULOS_EN_TIENDA=
            
            "select "
            + "nombre,categoria,precio,proveedor,precio,existencias"
            + " FROM Articulo INNE JOIN TiendaTieneArticulo"
            + " ON nombre = nombreArticulo AND proveedor = nombreProveedor "
            + "Where nombreTienda = ?";
           
        
    private static final String SQL_SELECT_ARTICULOS_EN_TIENDA_POR_PROVEEDOR=
            
            "select "
            + "nombre,categoria,precio,proveedor,precio,existencias"
            + " FROM Articulo INNE JOIN TiendaTieneArticulo"
            + " ON nombre = nombreArticulo AND proveedor = nombreProveedor "
            + "Where nombreTienda = ? "
            + "AND proveedor = ?";
    
        private static final String SQL_SELECT_ARTICULOS_EN_TIENDA_POR_NOMBRE_ARTICULO=
            
            "select "
            + "nombre,categoria,precio,proveedor,precio,existencias"
            + " FROM Articulo INNE JOIN TiendaTieneArticulo"
            + " ON nombre = nombreArticulo AND proveedor = nombreProveedor "
            + "Where nombreTienda = ? "
            + "AND nombre = ?";
              
       
    private static final String SQL_SELECT_ARTICULOS_EN_TIENDA_POR_CATEGORIA=
            
            "select "
            + "nombre,categoria,precio,proveedor,precio,existencias"
            + " FROM Articulo INNE JOIN TiendaTieneArticulo"
            + " ON nombre = nombreArticulo AND proveedor = nombreProveedor "
            + "Where nombreTienda = ? "
            + "AND categoria = ?";
    
        
    private static final String SQL_SELECT_ARTICULOS_EN_TIENDA_POR_NOMBRE_Y_CATEGORIA=
            
            "select "
            + "nombre,categoria,precio,proveedor,precio,existencias"
            + " FROM Articulo INNE JOIN TiendaTieneArticulo"
            + " ON nombre = nombreArticulo AND proveedor = nombreProveedor "
            + "Where nombreTienda = ? "
            + "AND nombre = ?"
            + "AND categoria = ?";
        
    private static final String SQL_SELECT_ARTICULOS_EN_TIENDA_POR_NOMBRE_Y_PROVEEDOR=
            
            "select "
            + "nombre,categoria,precio,proveedor,precio,existencias"
            + " FROM Articulo INNE JOIN TiendaTieneArticulo"
            + " ON nombre = nombreArticulo AND proveedor = nombreProveedor "
            + "Where nombreTienda = ? "
            + "AND nombre = ?"
            + "AND proveedor = ?";
        
    private static final String SQL_SELECT_ARTICULOS_EN_TIENDA_POR_PROVEEDOR_Y_CATEGORIA=
            
            "select "
            + "nombre,categoria,precio,proveedor,precio,existencias"
            + " FROM Articulo INNE JOIN TiendaTieneArticulo"
            + " ON nombre = nombreArticulo AND proveedor = nombreProveedor "
            + "Where nombreTienda = ? "
            + "AND proveedor = ?"
            + "AND categoria = ?";
    
    
    
    
    
    private static final String SQL_SELECT =
        "SELECT "
        + "categoria, proveedor, nombre, precio "
        + "FROM Articulo WHERE "
        + "proveedor = ? AND nombre = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE Articulo SET "
        + "categoria = ?, precio = ? "
        + "WHERE "
        + "proveedor = ? AND nombre = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM Articulo WHERE "
        + "proveedor = ? AND nombre = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Articulo bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setString(1, bean.getCategoria());
            ps.setString(2, bean.getProveedor());
            ps.setString(3, bean.getNombre());
            ps.setDouble(4, bean.getPrecio());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    
        
    public List load(String tienda,String argumento,int campo,Connection conn) throws SQLException {
        
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            switch(campo){
                
                case 1:{
                    ps = conn.prepareStatement(SQL_SELECT_ARTICULOS_EN_TIENDA_POR_NOMBRE_ARTICULO);
                    break;
                }
                case 2:{
                    ps = conn.prepareStatement(SQL_SELECT_ARTICULOS_EN_TIENDA_POR_PROVEEDOR);
                    break;
                }
                case 3:{
                    ps = conn.prepareStatement(SQL_SELECT_ARTICULOS_EN_TIENDA_POR_CATEGORIA);
                    break;
                }
                default:{
                    break;
                }
                      
                
            }

            ps.setString(1,tienda);
            ps.setString(2, argumento);
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return results;
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }
    
    //[0],[nombre],[provedor],[categoria],[nombre,proveedor],[nombre,categoria],[proveedor,categoria],[nombre,proveedor,categoria]

        public List load(String tienda,String argumento1,String argumento2,int combinacion,Connection conn) throws SQLException {
        
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            switch(combinacion){
                
                case 1:{
                    ps = conn.prepareStatement(SQL_SELECT_ARTICULOS_EN_TIENDA_POR_NOMBRE_Y_PROVEEDOR);
                    break;
                }
                case 2:{
                    ps = conn.prepareStatement(SQL_SELECT_ARTICULOS_EN_TIENDA_POR_NOMBRE_Y_CATEGORIA);
                    break;
                }
                case 3:{
                    ps = conn.prepareStatement(SQL_SELECT_ARTICULOS_EN_TIENDA_POR_PROVEEDOR_Y_CATEGORIA);
                    break;
                }
                default:{
                    break;
                }
                      
                
            }

            ps.setString(1,tienda);
            ps.setString(2, argumento1);
            ps.setString(3, argumento2);
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return results;
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }
    
    

    
    public List load(String tienda,Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            System.out.println(tienda);
            ps = conn.prepareStatement(SQL_SELECT_ARTICULOS_EN_TIENDA);
            ps.setString(1,tienda);
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return results;
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    
   
    public Articulo load(ArticuloKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setString(1, key.getProveedor());
            ps.setString(2, key.getNombre());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Articulo) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Articulo bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getCategoria());
            ps.setDouble(2, bean.getPrecio());
            ps.setString(3, bean.getProveedor());
            ps.setString(4, bean.getNombre());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(ArticuloKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setString(1, key.getProveedor());
            ps.setString(2, key.getNombre());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Object[]> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Articulo>();
        while (rs.next()) {
            Object[] bean = new Object[5];
            bean[0]=(rs.getString("nombre"));
            bean[1]=(rs.getString("categoria"));
            bean[2]=(rs.getString("proveedor"));
            bean[3]=rs.getFloat("precio");
            bean[4]=rs.getInt("existencias");
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}