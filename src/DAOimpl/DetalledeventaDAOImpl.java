/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Tue Mar 06 22:47:33 CST 2018
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package DAOimpl;

import modelo.Detalledeventa;
import modelo.DetalledeventaKey;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import DAO.DetalledeventaDAO;

/**
 * This class provides methods to populate DB Table of DetalleDeVenta
 */
public class DetalledeventaDAOImpl implements DetalledeventaDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO DetalleDeVenta ("
        + "nombreTienda, idVenta, anio, trimestre, nombreArticulo, nombreProveedor, piezasVendidas"
        + ") VALUES (?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "nombreTienda, idVenta, anio, trimestre, nombreArticulo, nombreProveedor, piezasVendidas "
        + "FROM DetalleDeVenta WHERE "
        + "idVenta = ? AND anio = ? AND trimestre = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE DetalleDeVenta SET "
        + "nombreTienda = ?, nombreArticulo = ?, nombreProveedor = ?, piezasVendidas = ? "
        + "WHERE "
        + "idVenta = ? AND anio = ? AND trimestre = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM DetalleDeVenta WHERE "
        + "idVenta = ? AND anio = ? AND trimestre = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Detalledeventa bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setString(1, bean.getNombretienda());
            ps.setInt(2, bean.getIdventa());
            ps.setInt(3, bean.getAnio());
            ps.setInt(4, bean.getTrimestre());
            ps.setString(5, bean.getNombrearticulo());
            ps.setString(6, bean.getNombreproveedor());
            ps.setInt(7, bean.getPiezasvendidas());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Detalledeventa load(DetalledeventaKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key.getIdventa());
            ps.setInt(2, key.getAnio());
            ps.setInt(3, key.getTrimestre());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Detalledeventa) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Detalledeventa bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombretienda());
            ps.setString(2, bean.getNombrearticulo());
            ps.setString(3, bean.getNombreproveedor());
            ps.setInt(4, bean.getPiezasvendidas());
            ps.setInt(5, bean.getIdventa());
            ps.setInt(6, bean.getAnio());
            ps.setInt(7, bean.getTrimestre());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(DetalledeventaKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key.getIdventa());
            ps.setInt(2, key.getAnio());
            ps.setInt(3, key.getTrimestre());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Detalledeventa> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Detalledeventa>();
        while (rs.next()) {
            Detalledeventa bean = new Detalledeventa();
            bean.setNombretienda(rs.getString("nombreTienda"));
            bean.setIdventa(rs.getInt("idVenta"));
            bean.setAnio(rs.getInt("anio"));
            bean.setTrimestre(rs.getInt("trimestre"));
            bean.setNombrearticulo(rs.getString("nombreArticulo"));
            bean.setNombreproveedor(rs.getString("nombreProveedor"));
            bean.setPiezasvendidas(rs.getInt("piezasVendidas"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}